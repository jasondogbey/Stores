
package mapp;
import java.sql.ResultSet;
import javax.swing.*;
import com.sun.glass.events.KeyEvent;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author unknown
 */
public class jplCollectors extends JPanel {
    final int pWidth = 850;
    final int pHeight = 365;
    
    JMenuItem gohome;
 
    public jplCollectors(JPanel jplMain, JMenuItem gohome) {
        initComponents();
        this.setSize(pWidth, pHeight);
        int x = (jplMain.getWidth()-pWidth)/2;
        int y = (jplMain.getHeight()-pHeight)/2;
        this.setLocation(x, y);
        this.setVisible(true);
        this.gohome=gohome;

        initialization();
        findCollectors();
        filltable();
        tfDistributionId.setEditable(false);
        tfDate.setEditable(false);
    }
    
    public void initialization(){
        tfCollectorId.setText("");
        tfName.setText("");
        tfAddress.setText("");
        tfDate.setText("");
        tfDistributionId.setText("");
        bnDelete.setEnabled(false);
        bnSearch.setText("Search");
        
    }
     private void filltable(){
        String query="select * from collector";
        try{
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            jtCollectors.setModel(DbUtils.resultSetToTableModel(rs));
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
    }
     public ArrayList<Collector> ListCollectors(String ValToSearch){
        ArrayList<Collector> collectorsList = new ArrayList<Collector>();
        ResultSet rs;
        try{
            String query = "SELECT * FROM `collector` WHERE CONCAT(`Collector_id`, `Collector_name`, `Address`, `Date`, `Requisition_id`) LIKE '"+ValToSearch+"%'";
            rs = utility.DBconnection.getStatement().executeQuery(query);
            Collector collector;
            while(rs.next()){
                collector = new Collector(
                    rs.getInt("Collector_id"),
                    rs.getString("Collector_name"),
                    rs.getString("Address"),
                    rs.getString("Date"),
                    rs.getString("Requisition_id"));
                    collectorsList.add(collector);
                }

        } catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "SELECT * FROM `collector` WHERE CONCAT(`Collector_name`, `Address`, `Date`, `Requisition_id`) LIKE '"+ValToSearch+"%'";
            rs = utility.DBconnection.getStatement().executeQuery(query);
            Collector collector;
            while(rs.next()){
                collector = new Collector(
                    rs.getInt("Collector_id"),
                    rs.getString("Collector_name"),
                    rs.getString("Address"),
                    rs.getString("Date"),
                    rs.getString("Requisition_id"));
                    collectorsList.add(collector);
                }

        } catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        return collectorsList;
    }
    public void findCollectors(){
        ArrayList<Collector> collectors = ListCollectors(tfSearch.getText());
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Collector_id","Collector_name","Address","Date","Requisition_id"});
        Object[] row= new Object[5];
        for (int i=0; i< collectors.size(); i++){
            row[0]= collectors.get(i).getCollector_id();
            row[1]= collectors.get(i).getCollector_name();
            row[2]= collectors.get(i).getAddress();
            row[3]= collectors.get(i).getDate();
            row[4]= collectors.get(i).getRequisition_id();
            model.addRow(row);
        }
        jtCollectors.setModel(model);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfAddress = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDate = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        tfCollectorId = new javax.swing.JTextField();
        bnSearch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        bnClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCollectors = new javax.swing.JTable();
        tfSearch = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfDistributionId = new javax.swing.JTextField();
        bnClear = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Address");
        jLabel5.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Collector ID");

        tfCollectorId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfCollectorIdFocusLost(evt);
            }
        });

        bnSearch.setBackground(new java.awt.Color(255, 255, 255));
        bnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-search-icon.png"))); // NOI18N
        bnSearch.setText("Search");
        bnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnSearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Name:");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Date/Time");
        jLabel4.setToolTipText("");

        bnDelete.setBackground(new java.awt.Color(255, 255, 255));
        bnDelete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-trash-icon.png"))); // NOI18N
        bnDelete.setText("Delete");
        bnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Collector");

        bnClose.setBackground(new java.awt.Color(255, 255, 255));
        bnClose.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-close blue-icon.png"))); // NOI18N
        bnClose.setText("Close");
        bnClose.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnCloseActionPerformed(evt);
            }
        });

        jtCollectors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtCollectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtCollectorsMouseClicked(evt);
            }
        });
        jtCollectors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtCollectorsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtCollectors);

        tfSearch.setText("Search...");
        tfSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfSearchMouseClicked(evt);
            }
        });
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Requisition ID");
        jLabel6.setToolTipText("");

        bnClear.setBackground(new java.awt.Color(255, 255, 255));
        bnClear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-clear.png"))); // NOI18N
        bnClear.setText("Clear");
        bnClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(24, 24, 24)
                                        .addComponent(tfDate))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(24, 24, 24)
                                        .addComponent(tfDistributionId)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(bnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(bnClear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bnDelete)
                                .addGap(36, 36, 36)
                                .addComponent(bnClose)
                                .addGap(28, 28, 28))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(18, 18, 18))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(65, 65, 65)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tfName)
                                        .addComponent(tfCollectorId, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfCollectorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfDistributionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bnSearch)
                            .addComponent(bnDelete)
                            .addComponent(bnClose)
                            .addComponent(bnClear))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfCollectorIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCollectorIdFocusLost
        tfCollectorId.setText(tfCollectorId.getText().toUpperCase());
    }//GEN-LAST:event_tfCollectorIdFocusLost

    private void bnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnSearchActionPerformed
        if (bnSearch.getText().equals("Search")){
            if (tfCollectorId.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Enter Collector ID");
                return;
            }
            String CollectorId = tfCollectorId.getText().trim();
            String query = "Select * from collector where Collector_id='"+CollectorId+"'";

            try{
                ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
                while(rs.next()){
                    tfCollectorId.setText(CollectorId);
                    tfName.setText(rs.getString("Collector_name"));
                    tfAddress.setText(rs.getString("Address"));
                    tfDate.setText(rs.getString("Date"));
                    tfDistributionId.setText(rs.getString("Requisition_Id"));

                }
                tfCollectorId.setEditable(false);
                tfName.setEditable(false);
                tfAddress.setEditable(false);
                tfDate.setEditable(false);

               
                bnDelete.setEnabled(true);
                bnSearch.setText("Edit");

            } catch (Exception e){
                JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
                tfCollectorId.setText("");
            }
        } else if (bnSearch.getText().equals("Edit")){
            tfCollectorId.setEditable(false);
            tfName.setEditable(true);
            tfAddress.setEditable(true);
            tfDate.setEditable(false);
           
            bnSearch.setText("Update");
        } else if (bnSearch.getText().equals("Update")){
            String query = "update collector set Collector_name='"+tfName.getText()+"', Address='"+tfAddress.getText()+"', Date='"+tfDate.getText()+"' where Collector_id='"+tfCollectorId.getText()+"'";
            try {
                if (utility.DBconnection.getStatement().executeUpdate(query)>0){
                    JOptionPane.showMessageDialog(null, "Update is Successful");
                    tfCollectorId.setText("");
                    tfName.setText("");
                    tfAddress.setText("");
                    tfDate.setText("");
                    tfCollectorId.setEditable(true);
                   
                    initialization();
                    filltable();
                } else {
                    JOptionPane.showMessageDialog(null, "Could not update data");
                    tfCollectorId.setText("");
                    tfName.setText("");
                    tfAddress.setText("");
                    tfDate.setText("");
                    

                    tfCollectorId.setEditable(false);
                    tfName.setEditable(true);
                    tfAddress.setEditable(true);
                    tfDate.setEditable(false);
                    
                }
            } catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_bnSearchActionPerformed

    private void bnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnDeleteActionPerformed
        String query= "delete from collector where Collector_id='"+tfCollectorId.getText().trim()+"'";
        try{
            if(utility.DBconnection.getStatement().executeUpdate(query)>0){
                JOptionPane.showMessageDialog(null, "Delete is Successful");
                tfCollectorId.setText("");
                tfName.setText("");
                tfAddress.setText("");
                tfDate.setText("");
          
                initialization();
                filltable();

                tfCollectorId.setEditable(true);
                tfName.setEditable(true);
                tfAddress.setEditable(true);
                tfDate.setEditable(false);
                

            }else{
                JOptionPane.showMessageDialog(null, "Delete not Successful");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
        }
    }//GEN-LAST:event_bnDeleteActionPerformed

    private void bnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnCloseActionPerformed
        if (utility.Utility.universalCode == 1){
            int res=JOptionPane.showConfirmDialog(null, "Do you want to save changes?","Warning",JOptionPane.YES_NO_OPTION);
            if (res==JOptionPane.YES_OPTION){
                if (bnSearch.getText().equals("Update")){
                    bnSearch.doClick();
                }else{
                    bnSearch.doClick();
                }
            }else{
                this.gohome.doClick();
            }
        }else{
            this.gohome.doClick();
        }

    }//GEN-LAST:event_bnCloseActionPerformed

    private void jtCollectorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtCollectorsMouseClicked
        try{
            int row=jtCollectors.getSelectedRow();
            String TableClick=jtCollectors.getModel().getValueAt(row, 0).toString();
            String query="select * from collector where Collector_id='"+TableClick+"'";

            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                tfCollectorId.setText(rs.getString("Collector_id"));
                tfName.setText(rs.getString("Collector_name"));
                tfAddress.setText(rs.getString("Address"));
                tfDate.setText(rs.getString("Date"));
                tfDistributionId.setText(rs.getString("Requisition_id"));
            }
            tfCollectorId.setEditable(false);
            tfName.setEditable(false);
            tfAddress.setEditable(false);
            tfDate.setEditable(false);
            

            bnDelete.setEnabled(true);
            bnSearch.setText("Edit");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
    }//GEN-LAST:event_jtCollectorsMouseClicked

    private void jtCollectorsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtCollectorsKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN||evt.getKeyCode() == KeyEvent.VK_UP){
            try{
            int row=jtCollectors.getSelectedRow();
            String TableClick=jtCollectors.getModel().getValueAt(row, 0).toString();
            String query="select * from collector where Collector_id='"+TableClick+"'";

            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                tfCollectorId.setText(rs.getString("Collector_id"));
                tfName.setText(rs.getString("Collector_name"));
                tfAddress.setText(rs.getString("Address"));
                tfDate.setText(rs.getString("Date"));
                tfDistributionId.setText(rs.getString("Requisition_id"));
            }
            tfCollectorId.setEditable(false);
            tfName.setEditable(false);
            tfAddress.setEditable(false);
            tfDate.setEditable(false);
            

            bnDelete.setEnabled(true);
            bnSearch.setText("Edit");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        }
    }//GEN-LAST:event_jtCollectorsKeyReleased

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        if (tfSearch.getText().isEmpty() )
        {
            initialization();
            filltable();
            return;
        }
        tfCollectorId.setEditable(false);
            tfName.setEditable(false);
            tfAddress.setEditable(false);
            tfDate.setEditable(false);
            

            bnDelete.setEnabled(true);
            bnSearch.setText("Edit");
        
        try{
            String query = "select * from collector where Address LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                tfCollectorId.setText(rs.getString("Collector_id"));
                tfName.setText(rs.getString("Collector_name"));
                tfAddress.setText(rs.getString("Address"));
                tfDate.setText(rs.getString("Date"));
                tfDistributionId.setText(rs.getString("Requisition_id"));
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from collector where Date LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                tfCollectorId.setText(rs.getString("Collector_id"));
                tfName.setText(rs.getString("Collector_name"));
                tfAddress.setText(rs.getString("Address"));
                tfDate.setText(rs.getString("Date"));
                tfDistributionId.setText(rs.getString("Requisition_id"));
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from collector where Requisition_id LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                tfCollectorId.setText(rs.getString("Collector_id"));
                tfName.setText(rs.getString("Collector_name"));
                tfAddress.setText(rs.getString("Address"));
                tfDate.setText(rs.getString("Date"));
                tfDistributionId.setText(rs.getString("Requisition_id"));
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from collector where Collector_name LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                tfCollectorId.setText(rs.getString("Collector_id"));
                tfName.setText(rs.getString("Collector_name"));
                tfAddress.setText(rs.getString("Address"));
                tfDate.setText(rs.getString("Date"));
                tfDistributionId.setText(rs.getString("Requisition_id"));
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from collector where Collector_id LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                tfCollectorId.setText(rs.getString("Collector_id"));
                tfName.setText(rs.getString("Collector_name"));
                tfAddress.setText(rs.getString("Address"));
                tfDate.setText(rs.getString("Date"));
                tfDistributionId.setText(rs.getString("Requisition_id"));
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        findCollectors();
    }//GEN-LAST:event_tfSearchKeyReleased

    private void tfSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfSearchMouseClicked
        tfSearch.setText("");
    }//GEN-LAST:event_tfSearchMouseClicked

    private void bnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnClearActionPerformed
        initialization();
        tfCollectorId.setEditable(true);
    }//GEN-LAST:event_bnClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnClear;
    private javax.swing.JButton bnClose;
    private javax.swing.JButton bnDelete;
    private javax.swing.JButton bnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jtCollectors;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JTextField tfCollectorId;
    private javax.swing.JTextField tfDate;
    private javax.swing.JTextField tfDistributionId;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
