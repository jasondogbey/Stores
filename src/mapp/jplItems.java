/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mapp;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.sql.ResultSet;
import javax.swing.*;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author Unknown
 */
public class jplItems extends JPanel {
    final int pWidth = 795;
    final int pHeight = 440;
    JMenuBar bar;
    JMenu search;
    JMenuItem gohome;
    JPanel home;
    int SupplierId;
    String Supplier;
    /**
     * Creates new form jplItems
     */
    public jplItems(JPanel jplMain, JMenuItem gohome) {
        initComponents();
        this.setSize(pWidth, pHeight);
        int x = (jplMain.getWidth()-pWidth)/2;
        int y = (jplMain.getHeight()-pHeight)/2;
        this.setLocation(x, y);
        this.setVisible(true);
        this.gohome=gohome;
        //bnSearch.setText("Search");
        initialization();
          filltable();
          fillcombo();
      
    }
    public void initialization(){
        tfItemId.setText("");
        tfItemName.setText("");
        tfUnitPrice.setText("");
        tfQuantity.setText("");
        //taSuppliers.setText("");
        taLocation.setText("");
        taNotes.setText("");
        bnDelete.setEnabled(false);
        tfItemId.setEditable(false);
        cbSupplier.setEditable(true);
        bnSearch.setText("Search");
        
    }
    private void fillcombo(){
        String query="select Supplier_name from supplier";
        try{
           
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
            cbSupplier.addItem(rs.getString("Supplier_name"));
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
    }
    private void filltable(){
        String query="select * from item";
        try{
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            jtItems.setModel(DbUtils.resultSetToTableModel(rs));
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
    }
    public void displayForm(JPanel jp){
        home.remove(jp);
        home.add(jp);
        home.validate();
        home.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtItems = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bnSearch = new javax.swing.JButton();
        bnDelete = new javax.swing.JButton();
        bnClose = new javax.swing.JButton();
        tfItemId = new javax.swing.JTextField();
        tfItemName = new javax.swing.JTextField();
        tfUnitPrice = new javax.swing.JTextField();
        tfQuantity = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        taNotes = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        taLocation = new javax.swing.JTextArea();
        bnSave = new javax.swing.JButton();
        cbSupplier = new javax.swing.JComboBox<>();
        bnClear = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();

        setBackground(new java.awt.Color(153, 204, 255));

        jtItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtItemsMouseClicked(evt);
            }
        });
        jtItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtItemsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtItemsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtItems);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-Item-Bag-icon.png"))); // NOI18N
        jLabel1.setText("Items");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Item ID");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Item Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Unit Price");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Quantity");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Suppliers");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Location");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Notes");

        bnSearch.setBackground(new java.awt.Color(255, 255, 255));
        bnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-search-icon.png"))); // NOI18N
        bnSearch.setText("Search");
        bnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnSearchActionPerformed(evt);
            }
        });

        bnDelete.setBackground(new java.awt.Color(255, 255, 255));
        bnDelete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-trash-icon.png"))); // NOI18N
        bnDelete.setText("Delete");
        bnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnDeleteActionPerformed(evt);
            }
        });

        bnClose.setBackground(new java.awt.Color(255, 255, 255));
        bnClose.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-close blue-icon.png"))); // NOI18N
        bnClose.setText("Close");
        bnClose.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnCloseActionPerformed(evt);
            }
        });

        tfItemId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfItemIdFocusLost(evt);
            }
        });

        tfItemName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfItemNameMouseClicked(evt);
            }
        });

        tfUnitPrice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfUnitPriceMouseClicked(evt);
            }
        });

        tfQuantity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfQuantityMouseClicked(evt);
            }
        });

        taNotes.setColumns(20);
        taNotes.setRows(5);
        jScrollPane3.setViewportView(taNotes);

        taLocation.setColumns(20);
        taLocation.setRows(5);
        jScrollPane4.setViewportView(taLocation);

        bnSave.setBackground(new java.awt.Color(255, 255, 255));
        bnSave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-Save-icon.png"))); // NOI18N
        bnSave.setText("Save");
        bnSave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnSaveActionPerformed(evt);
            }
        });

        bnClear.setBackground(new java.awt.Color(255, 255, 255));
        bnClear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapp/button-clear.png"))); // NOI18N
        bnClear.setText("Clear");
        bnClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnClearActionPerformed(evt);
            }
        });

        tfSearch.setText("Search...");
        tfSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfSearchMouseClicked(evt);
            }
        });
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(bnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 30, Short.MAX_VALUE)
                                .addComponent(bnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(bnClear)
                                .addGap(35, 35, 35))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfQuantity)
                            .addComponent(tfUnitPrice)
                            .addComponent(tfItemName)
                            .addComponent(tfItemId)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(cbSupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(bnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(cbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jLabel7)
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bnSearch)
                    .addComponent(bnSave)
                    .addComponent(bnDelete)
                    .addComponent(bnClear)
                    .addComponent(bnClose))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnSearchActionPerformed
       if (bnSearch.getText().equals("Search")){
            if (tfItemId.getText().isEmpty()){
                tfItemId.setEditable(true);
                JOptionPane.showMessageDialog(null, "Enter Item ID");
                return;  
            }
            String ItemId = tfItemId.getText().trim();
            String query = "Select * from item where Item_id='"+ItemId+"'";
            
            
            try{
                ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
                while(rs.next()){
                    tfItemId.setText(ItemId);
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    SupplierId=Integer.parseInt(rs.getString("Supplier_id"));
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                String query1 = "Select Supplier_name from supplier where Supplier_id='"+SupplierId+"'";
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    cbSupplier.setSelectedItem(rs1.getString("Supplier_name"));
                    Supplier=cbSupplier.getSelectedItem().toString().trim();
                }
                
                tfItemId.setEditable(false);
                tfItemName.setEditable(false);
                tfUnitPrice.setEditable(false);
                tfQuantity.setEditable(false);
                cbSupplier.setEnabled(false);
                taLocation.setEditable(false);
                taNotes.setEditable(false);
                
                bnSave.setEnabled(false);
                bnDelete.setEnabled(true);
                bnSearch.setText("Edit");
                
            } catch (Exception e){
                JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
                tfItemId.setText("");
            }
        } else if (bnSearch.getText().equals("Edit")){
            tfItemId.setEditable(false);
            tfItemName.setEditable(true);
            tfUnitPrice.setEditable(true);
            tfQuantity.setEditable(true);
            cbSupplier.setEnabled(true);
            taLocation.setEditable(true);
            taNotes.setEditable(true);
            bnSearch.setText("Update");
        } else if (bnSearch.getText().equals("Update")){
            Supplier=cbSupplier.getSelectedItem().toString().trim();
            String query1 = "Select Supplier_id from supplier where Supplier_name='"+Supplier+"'";
            
            try{
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    SupplierId=Integer.parseInt(rs1.getString("Supplier_id"));
                }
                } catch (Exception e){
                JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
                tfItemId.setText("");
            }
            
    
            String query = "update item set Item_name='"+tfItemName.getText()+"', Unit_price='"+tfUnitPrice.getText()+"', Quantity='"+tfQuantity.getText()+"', Supplier_id='"+SupplierId+"', Location='"+taLocation.getText()+"', Notes='"+taNotes.getText()+"' where Item_id='"+tfItemId.getText()+"'";
            try {
                if (utility.DBconnection.getStatement().executeUpdate(query)>0){
                    JOptionPane.showMessageDialog(null, "Update is Successful");
                    tfItemId.setText("");
                    tfItemName.setText("");
                    tfUnitPrice.setText("");
                    tfQuantity.setText("");
                    taLocation.setText("");
                    taNotes.setText("");
                    //bnSearch.setText("Search");
                    initialization();
                    //tfItemId.setEditable(true);
                    bnSave.setEnabled(true);
                    filltable();
                    cbSupplier.removeAllItems();
                    fillcombo();
                } else {
                    JOptionPane.showMessageDialog(null, "Could not update data");
                    tfItemId.setText("");
                    tfItemName.setText("");
                    tfUnitPrice.setText("");
                    tfQuantity.setText("");
                    cbSupplier.removeAllItems();
                    fillcombo();
                    taLocation.setText("");
                    taNotes.setText("");
                    //bnSearch.setText("Search");
                    
                    tfItemId.setEditable(true);
                    tfItemName.setEditable(true);
                    tfUnitPrice.setEditable(true);
                    tfQuantity.setEditable(true);
                    cbSupplier.setEnabled(true);
                    taLocation.setEditable(true);
                    taNotes.setEditable(true);
                }
            } catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_bnSearchActionPerformed

    private void bnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnSaveActionPerformed
        Supplier=cbSupplier.getSelectedItem().toString().trim();
            String query1 = "Select Supplier_id from supplier where Supplier_name='"+Supplier+"'";
            
            try{
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    SupplierId=Integer.parseInt(rs1.getString("Supplier_id"));
                }
                } catch (Exception e){
                JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
                tfItemId.setText("");
            }
            if (tfItemName.getText().isEmpty()&&tfQuantity.getText().isEmpty()&&tfUnitPrice.getText().isEmpty()){
            tfItemName.setBackground(Color.red);
            tfQuantity.setBackground(Color.red);
            tfUnitPrice.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Highlighted fields are required");
            return;
        }
            if (tfItemName.getText().isEmpty()&&tfQuantity.getText().isEmpty()){
            tfItemName.setBackground(Color.red);
            tfQuantity.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Highlighted fields are required");
            return;
        }
            if (tfItemName.getText().isEmpty()&&tfUnitPrice.getText().isEmpty()){
            tfItemName.setBackground(Color.red);
            tfUnitPrice.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Highlighted fields are required");
            return;
        }
            if (tfQuantity.getText().isEmpty()&&tfUnitPrice.getText().isEmpty()){
            tfQuantity.setBackground(Color.red);
            tfUnitPrice.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Highlighted fields are required");
            return;
        }
            if (tfItemName.getText().isEmpty()){
            tfItemName.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Highlighted field is required");
            return;
        }
            if (tfQuantity.getText().isEmpty()){
            tfQuantity.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Highlighted field is required");
            return;
        }
            if (tfUnitPrice.getText().isEmpty()){
            tfUnitPrice.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Highlighted field is required");
            return;
        }
        String query="insert into item values (null,'"+tfItemName.getText()+"','"+tfUnitPrice.getText()+"','"+tfQuantity.getText()+"','"+SupplierId+"','"+taLocation.getText()+"','"+taNotes.getText()+"')";
        try{
           if(utility.DBconnection.getStatement().executeUpdate(query)>0){
               JOptionPane.showMessageDialog(null, "Successfully saved Item");
                tfItemId.setText("");
                tfItemName.setText("");
                tfUnitPrice.setText("");
                tfQuantity.setText("");
                cbSupplier.removeAllItems();
                fillcombo();
                taLocation.setText("");
                taNotes.setText("");
               initialization();
               filltable();
           }else{
               JOptionPane.showMessageDialog(null, "Could not save data");
           }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
        }
    }//GEN-LAST:event_bnSaveActionPerformed

    private void bnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnDeleteActionPerformed
         String query= "delete from item where Item_id='"+tfItemId.getText().trim()+"'";
            try{
                if(utility.DBconnection.getStatement().executeUpdate(query)>0){
                    JOptionPane.showMessageDialog(null, "Delete is Successful");
                    tfItemId.setText("");
                    tfItemName.setText("");
                    tfUnitPrice.setText("");
                    tfQuantity.setText("");
                    cbSupplier.removeAllItems();
                    fillcombo();
                    taLocation.setText("");
                    taNotes.setText("");
                    initialization();
                    filltable();
                    
                    //tfItemId.setEditable(true);
                    //tfItemName.setEditable(true);
                    tfUnitPrice.setEditable(true);
                    tfQuantity.setEditable(true);
                   cbSupplier.setEnabled(true);
                    taLocation.setEditable(true);
                    taNotes.setEditable(true);
                }else{
                    JOptionPane.showMessageDialog(null, "Delete not Successful");
                }
             }catch(Exception e){
                 JOptionPane.showMessageDialog(null, "Error: "+e.getMessage());
             }
    }//GEN-LAST:event_bnDeleteActionPerformed

    private void bnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnCloseActionPerformed
        if (utility.Utility.universalCode == 1){
            int res=JOptionPane.showConfirmDialog(null, "Do you want to save changes?","Warning",JOptionPane.YES_NO_OPTION);
            if (res==JOptionPane.YES_OPTION){
                if (bnSearch.getText().equals("Update")){
                    bnSearch.doClick();
                }else{
                    bnSave.doClick();
                }
            }else{
                this.gohome.doClick();
            }
        }else{
            this.gohome.doClick();
        }
    }//GEN-LAST:event_bnCloseActionPerformed

    private void tfItemIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfItemIdFocusLost
        tfItemId.setText(tfItemId.getText().toUpperCase());
    }//GEN-LAST:event_tfItemIdFocusLost

    private void jtItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtItemsMouseClicked

        try{
            int row=jtItems.getSelectedRow();
            String TableClick=jtItems.getModel().getValueAt(row, 0).toString();
            String query="select * from item where Item_id='"+TableClick+"'";
            
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    cbSupplier.setEnabled(false);
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
            
                tfItemId.setEditable(false);
                tfItemName.setEditable(false);
                tfUnitPrice.setEditable(false);
                tfQuantity.setEditable(false);
                //taSuppliers.setEditable(false);
                cbSupplier.setEnabled(false);
                taLocation.setEditable(false);
                taNotes.setEditable(false);
                
                bnSave.setEnabled(false);
                bnDelete.setEnabled(true);
                bnSearch.setText("Edit");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
    }//GEN-LAST:event_jtItemsMouseClicked

    private void jtItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtItemsKeyPressed

    }//GEN-LAST:event_jtItemsKeyPressed

    private void jtItemsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtItemsKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN||evt.getKeyCode() == KeyEvent.VK_UP){
          try{
            int row=jtItems.getSelectedRow();
            String TableClick=jtItems.getModel().getValueAt(row, 0).toString();
            String query="select * from item where Item_id='"+TableClick+"'";
            
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                   // taSuppliers.setText(rs.getString("Suppliers"));
                    cbSupplier.setEnabled(false);
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                tfItemId.setEditable(false);
                tfItemName.setEditable(false);
                tfUnitPrice.setEditable(false);
                tfQuantity.setEditable(false);
                //taSuppliers.setEditable(false);
                cbSupplier.setEnabled(false);
                taLocation.setEditable(false);
                taNotes.setEditable(false);
                
                bnSave.setEnabled(false);
                bnDelete.setEnabled(true);
                bnSearch.setText("Edit");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }  
        }
    }//GEN-LAST:event_jtItemsKeyReleased

    private void tfItemNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfItemNameMouseClicked
        tfItemName.setBackground(Color.WHITE);
    }//GEN-LAST:event_tfItemNameMouseClicked

    private void tfUnitPriceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfUnitPriceMouseClicked
        tfUnitPrice.setBackground(Color.WHITE);
    }//GEN-LAST:event_tfUnitPriceMouseClicked

    private void tfQuantityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfQuantityMouseClicked
        tfQuantity.setBackground(Color.WHITE);
    }//GEN-LAST:event_tfQuantityMouseClicked

    private void bnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnClearActionPerformed
        initialization();
        bnSave.setEnabled(true);
    }//GEN-LAST:event_bnClearActionPerformed

    private void tfSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfSearchMouseClicked
        tfSearch.setText("");
    }//GEN-LAST:event_tfSearchMouseClicked

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        if (tfSearch.getText().isEmpty() )
        {
            initialization();
            return;
        }
        tfItemId.setEditable(false);
                tfItemName.setEditable(false);
                tfUnitPrice.setEditable(false);
                tfQuantity.setEditable(false);
                //taSuppliers.setEditable(false);
                cbSupplier.setEnabled(false);
                taLocation.setEditable(false);
                taNotes.setEditable(false);
                
                bnSave.setEnabled(false);
                bnDelete.setEnabled(true);
                bnSearch.setText("Edit");
        
        try{
            String query = "select * from item where Unit_price LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    SupplierId=Integer.parseInt(rs.getString("Supplier_id"));
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                String query1 = "Select Supplier_name from supplier where Supplier_id='"+SupplierId+"'";
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    cbSupplier.setSelectedItem(rs1.getString("Supplier_name"));
                    Supplier=cbSupplier.getSelectedItem().toString().trim();
                }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from item where Quantity LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    SupplierId=Integer.parseInt(rs.getString("Supplier_id"));
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                String query1 = "Select Supplier_name from supplier where Supplier_id='"+SupplierId+"'";
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    cbSupplier.setSelectedItem(rs1.getString("Supplier_name"));
                    Supplier=cbSupplier.getSelectedItem().toString().trim();
                }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from item where Location LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    SupplierId=Integer.parseInt(rs.getString("Supplier_id"));
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                String query1 = "Select Supplier_name from supplier where Supplier_id='"+SupplierId+"'";
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    cbSupplier.setSelectedItem(rs1.getString("Supplier_name"));
                    Supplier=cbSupplier.getSelectedItem().toString().trim();
                }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from item where Notes LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    SupplierId=Integer.parseInt(rs.getString("Supplier_id"));
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                String query1 = "Select Supplier_name from supplier where Supplier_id='"+SupplierId+"'";
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    cbSupplier.setSelectedItem(rs1.getString("Supplier_name"));
                    Supplier=cbSupplier.getSelectedItem().toString().trim();
                }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from item where Item_name LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    SupplierId=Integer.parseInt(rs.getString("Supplier_id"));
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                String query1 = "Select Supplier_name from supplier where Supplier_id='"+SupplierId+"'";
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    cbSupplier.setSelectedItem(rs1.getString("Supplier_name"));
                    Supplier=cbSupplier.getSelectedItem().toString().trim();
                }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
        try{
            String query = "select * from item where Item_id LIKE '"+tfSearch.getText()+"%'";
            ResultSet rs = utility.DBconnection.getStatement().executeQuery(query);
            while(rs.next()){
                    tfItemId.setText(rs.getString("Item_id"));
                    tfItemName.setText(rs.getString("Item_name"));
                    tfUnitPrice.setText(rs.getString("Unit_price"));
                    tfQuantity.setText(rs.getString("Quantity"));
                    //taSuppliers.setText(rs.getString("Suppliers"));
                    SupplierId=Integer.parseInt(rs.getString("Supplier_id"));
                    taLocation.setText(rs.getString("Location"));
                    taNotes.setText(rs.getString("Notes"));
                }
                String query1 = "Select Supplier_name from supplier where Supplier_id='"+SupplierId+"'";
                ResultSet rs1 = utility.DBconnection.getStatement().executeQuery(query1);
                while(rs1.next()){
                    cbSupplier.setSelectedItem(rs1.getString("Supplier_name"));
                    Supplier=cbSupplier.getSelectedItem().toString().trim();
                }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: "+e.getMessage());
        }
    }//GEN-LAST:event_tfSearchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnClear;
    private javax.swing.JButton bnClose;
    private javax.swing.JButton bnDelete;
    private javax.swing.JButton bnSave;
    private javax.swing.JButton bnSearch;
    private javax.swing.JComboBox<String> cbSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jtItems;
    private javax.swing.JTextArea taLocation;
    private javax.swing.JTextArea taNotes;
    private javax.swing.JTextField tfItemId;
    private javax.swing.JTextField tfItemName;
    private javax.swing.JTextField tfQuantity;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextField tfUnitPrice;
    // End of variables declaration//GEN-END:variables
}
